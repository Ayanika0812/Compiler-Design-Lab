parse table
put in 2D array
implement SLR(1) ALGO

push (inp to stack)
pop(stack)
tos(currect value map it to the inp)



1. Develop an SLR(1) parser for the given expression grammar and demonstrate parsing actions.
E->E+T|T
T-> T*F|F
F-> ( E )|id
in C

parse table
put in 2D array
implement SLR(1) ALGO

push (inp to stack)
pop(stack)
tos(currect value map it to the inp)


there are  total 13 states ( 0 to 12)

parse table

int ACTION[13][6] = {
// ( ) + * id $
    {4, 0, 0, 0, 5, 0}, // State 0
    {0, 0, 6, 0, 0, Accept}, // State 1
    {0, REduce 2, Reduce 2, 7, 0, 0}, // State 2
    {0, REduce 4, Reduce 4, Reduce 4, 0, 0}, // State 3
    {0, 0, 0, 0, 5, 0}, // State 4
    {0, REduce 6, Reduce 6, Reduce 6, 0, 5}, // State 5
    {4, 0, 0, 0, 0, 5}, // State 6
    {4, 0, 0, 0, 0, 5}, // State 7
    {0, 12, 6, 0, 0, 0}, // State 8
    {0, REduce 2, REduce 2, 7, 0, 10}, // State 9
    {0, REduce 1, REduce 1, 0, 0, 11}, // State 10
    {0, REduce 4, REduce 4, REduce 4, 0, 12}, // State 11
    {0, REduce 5, REduce 5, REduce 5, 0, 0}  // State 12
};

int GOTO[13][3] = {
    {1, 2, 3},  // State 0
    {0, 0, 0},  // State 1
    {0, 0, 0},  // State 2
    {0, 0, 0},  // State 3
    {8, 9, 3},  // State 4
    {0, 0, 0},  // State 5
    {0, 10, 3},  // State 6
    {0, 0, 11},  // State 7
    {0, 0, 0},  // State 8
    {0, 0, 0},  // State 9
    {0, 0, 0},  // State 10
    {0, 0, 0},  // State 11
    {0, 0, 0}   // State 12
};